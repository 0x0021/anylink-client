name: Release

on:
  workflow_dispatch

jobs:
  setup:
    name: Setup
    uses: tlslink/vpnagent/.github/workflows/release-setup.yml@main
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux]
        include:
        - build: linux
          os: ubuntu-20.04
          archive-name: anylink-linux-amd64.tar.gz
    steps:    
    - name: Install dependencies
      run: |
        if [ "${{ matrix.build }}" = "linux" ]; then
          sudo apt-get update
          sudo apt-get upgrade -y
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y -q --force-yes \
          automake cmake git wget libfuse2 desktop-file-utils tree \
          build-essential libgl1-mesa-dev libxkbcommon-x11-0 libpulse-dev \
          libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 \
          libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 \
          libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 \
          libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 \
          libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 \
          libxkbcommon-x11-dev extra-cmake-modules fcitx-libs-dev
        fi
      
    - name: install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2' # https://download.qt.io/online/qtsdkrepository/
        # modules: 'qtwebsockets'
        tools: 'tools_ifw'
        install-deps: false
        cache: true
    - uses: actions/checkout@v3
    - name: Build
      run: |
        qmake
        make -j $(nproc)
        wget -c -nv https://github.com/fcitx/fcitx-qt5/archive/refs/heads/master.zip
        unzip master.zip
        cd fcitx-qt5-master
        cmake .
        make -j $(nproc)
        cd ..
    - name: Build archive
      shell: bash
      run: |
        mkdir archive
        # ls -lR
        if [ "${{ matrix.build }}" = "linux" ]; then
          wget -c -nv "https://github.com/itviewer/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage out/opt/anylink/bin/anylink -extra-plugins=platformthemes/libqgtk3.so -no-copy-copyright-files
          cp fcitx-qt5-master/qt5/platforminputcontext/libfcitxplatforminputcontextplugin.so out/opt/anylink/plugins/platforminputcontexts/
          wget -c -nv https://github.com/tlslink/vpnagent/releases/download/continuous/vpnagent.tar.gz
          tar -zxvf vpnagent.tar.gz
          cp vpnagent out/opt/anylink/bin
          7z a installer/packages/root/data/anylink.7z ./out/opt/anylink/*
          cd installer
          ${{ github.workspace }}/../Qt/Tools/QtInstallerFramework/4.5/bin/binarycreator --offline-only -c config/config.xml -p packages anylink-linux-amd64.run
          tar -zcvf ${{ github.workspace }}/archive/${{ matrix.archive-name }} install.sh anylink-linux-amd64.run
        fi
    - name: Upload archive
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.archive-name }}
        path: archive/${{ matrix.archive-name }}
        
    - name: Continuous release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main'
      with:
        prerelease: false
        files: archive/${{ matrix.archive-name }}
        tag_name: continuous
        
    - if: (startsWith(github.ref, 'refs/tags/'))
      name: Tagged release
      uses: softprops/action-gh-release@v1
      with:
        files: archive/${{ matrix.archive-name }}
        name: Release build (${{ github.ref_name }})
